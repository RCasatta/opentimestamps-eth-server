#!/usr/bin/env python3
# Copyright (C) 2016 The OpenTimestamps developers
#
# This file is part of the OpenTimestamps Server.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution.
#
# No part of the OpenTimestamps Server, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.

import argparse
import logging.handlers
import os
import sys
import threading

import otsserver.calendar
import otsserver.eth_rpc
import otsserver.eth_stamper

parser = argparse.ArgumentParser(description="OpenTimestamps Server")

parser.add_argument("-q", "--quiet", action="count", default=0,
                    help="Be more quiet.")
parser.add_argument("-v", "--verbose", action="count", default=0,
                    help="Be more verbose. Both -v and -q may be used multiple times.")
parser.add_argument("-c", "--calendar", type=str,
                    dest='calendar_path',
                    default='~/.otsd/eth-calendar',
                    help="Location of the calendar (default: '%(default)s')")

parser.add_argument("--debug-file", type=str,
                    dest='debug_file',
                    default='~/.otsd/eth-debug.log',
                    help="Location of the debug log")
parser.add_argument("--debug-file-max-size", type=int,
                    dest='debug_file_max_size',
                    default=10000000,
                    help="Max size of the debug log (default: %(default)d bytes) ")

parser.add_argument("--rpc-port", type=int,
                    default=14789,
                    help="RPC port (default: %(default)d)")
parser.add_argument("--rpc-address", type=str,
                    default='localhost',
                    help="RPC address (default: %(default)s)")


parser.add_argument("--web3-rpc-port", type=int,
                    default=8545,
                    help="Ethereum Web3 RPC port (default: %(default)d)")
parser.add_argument("--web3-rpc-address", type=str,
                    default='localhost',
                    help="Ethereum Web3 RPC address (default: %(default)s)")

parser.add_argument("--wait-confirmations", type=int,
                    default=37,
                    help="Wait this number of confirmations to consider timestamp valid")
parser.add_argument("--wait-time-between-txs", type=int,
                    default=3600,
                    help="Wait this number of seconds before doing another transaction")



args = parser.parse_args()
args.parser = parser

debugfile = os.path.expanduser(args.debug_file)
handler = logging.handlers.RotatingFileHandler(filename=debugfile, maxBytes=args.debug_file_max_size)
logger = logging.getLogger('')
logger.addHandler(handler)
ch = logging.StreamHandler(sys.stdout)
logger.addHandler(ch)

args.verbosity = args.verbose - args.quiet

if args.verbosity == 0:
    logging.root.setLevel(logging.INFO)
elif args.verbosity > 0:
    logging.root.setLevel(logging.DEBUG)
elif args.verbosity == -1:
    logging.root.setLevel(logging.WARNING)
elif args.verbosity < -1:
    logging.root.setLevel(logging.ERROR)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(message)s - %(levelname)s')
ch.setFormatter(formatter)

class Blacklist(logging.Filter):
    def __init__(self, *blacklist):
        self.blacklist = [logging.Filter(name) for name in blacklist]

    def filter(self, record):
        return not any(f.filter(record) for f in self.blacklist)

ch.addFilter(Blacklist('requests.packages.urllib3.connectionpool'))

exit_event = threading.Event()

web3_address = (args.web3_rpc_address, args.web3_rpc_port)

calendar_path = os.path.expanduser(args.calendar_path)
calendar = otsserver.calendar.Calendar(calendar_path)
aggregator = otsserver.calendar.Aggregator(calendar, exit_event)
stamper = otsserver.eth_stamper.EthStamper(calendar, exit_event, web3_address, args)
calendar.stamper = stamper


server = otsserver.eth_rpc.StampServer((args.rpc_address, args.rpc_port), web3_address, aggregator, calendar)
try:
    server.serve_forever()
except KeyboardInterrupt:
    exit_event.set()
    sys.exit(0)


# vim:syntax=python filetype=python

